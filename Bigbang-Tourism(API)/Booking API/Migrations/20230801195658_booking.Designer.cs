// <auto-generated />
using System;
using Booking_API.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking_API.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20230801195658_booking")]
    partial class booking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bigbang_Tourism.Models.Booking_Details", b =>
                {
                    b.Property<int>("Booking_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_Id"));

                    b.Property<int>("Agent_Id")
                        .HasColumnType("int");

                    b.Property<string>("BillingDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BillingPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Tour_Id")
                        .HasColumnType("int");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Booking_Id");

                    b.HasIndex("Hotel_Id");

                    b.HasIndex("Tour_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Booking_Details");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("User_Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Hotel", b =>
                {
                    b.Property<int>("Hotel_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Hotel_Id"));

                    b.Property<string>("Contact_Details")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Hotel_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Hotel_Id");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Tour", b =>
                {
                    b.Property<int>("Tour_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tour_Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tour_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tour_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tour_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Tour_Id");

                    b.HasIndex("Hotel_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Travel_Agent", b =>
                {
                    b.Property<int>("Agent_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Agent_Id"));

                    b.Property<string>("Agency_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Contact_Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Agent_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Travel_Agent");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("User_Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Booking_Details", b =>
                {
                    b.HasOne("Bigbang_Tourism.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("Hotel_Id");

                    b.HasOne("Bigbang_Tourism.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("Tour_Id");

                    b.HasOne("Bigbang_Tourism.Models.User", "User")
                        .WithMany("BookingDetails")
                        .HasForeignKey("User_Id");

                    b.Navigation("Hotel");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Feedback", b =>
                {
                    b.HasOne("Bigbang_Tourism.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Tour", b =>
                {
                    b.HasOne("Bigbang_Tourism.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bigbang_Tourism.Models.User", "User")
                        .WithMany("Tours")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.Travel_Agent", b =>
                {
                    b.HasOne("Bigbang_Tourism.Models.User", "User")
                        .WithMany("TravelAgents")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bigbang_Tourism.Models.User", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("Tours");

                    b.Navigation("TravelAgents");
                });
#pragma warning restore 612, 618
        }
    }
}
